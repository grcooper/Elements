<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Spawn Continue Button if we won
if (winCond)
{
    instance_create(room_width/2, 500, saveCont_obj);
}

//Load the back to menu button
instance_create(room_width/2, 600, bsMenu_obj);

//Score for Monsters killed
globalvar eKilledScore;
eKilledScore = score;

//Accuracy Score
globalvar aScore;

//Divide by zero case
if (mFired != 0)
{
    aScore = round((mHit / mFired) * 100);
}
else
{
    aScore = 0;
}

//Wall health score
globalvar wallScore;
wallScore = wallHealth

//Wizard Health Score
globalvar healthScore;
healthScore = health;

//Used to keep prev score for display purposes
ps = prevTotalScore;

//TotalScore
globalvar totalScore;
totalScore = aScore + eKilledScore + wallScore + healthScore + prevTotalScore;

//Set the new previous score to the current total score
prevTotalScore = totalScore;

//Reset Everything
health = 100;
score = 0;
wallHealth = 100;
mFired = 0;
mHit = 0;

//Use a variable to count up the scores dramatically
mk = 0;
as = 0;
ws = 0;
hs = 0;
ts = 0;

//Increase the current level on score screen
curLevel += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Title
draw_set_color(c_black);
draw_set_font(title_fnt);
draw_set_halign(fa_center);
draw_text(room_width/2, 150, "Level " + string(curLevel) + " Score");


draw_set_font(scoreshadow_fnt);

//Monsters Killed Score
if(mk &lt; eKilledScore)
{  
    mk += 1;
}
    draw_text(room_width/2, 250, "Monsters Killed: " + string(mk));  

//accuracy score
if(as &lt; aScore &amp;&amp; mk &gt;= eKilledScore)
{ 
    as += 1;
}
draw_text(room_width/2, 280, "Accuracy: " + string(as));

//Wall Health Score
if(ws &lt; wallScore &amp;&amp; as &gt;= aScore)
{ 
    ws += 1;
}
draw_text(room_width/2, 310, "Wall Health: " + string(ws));

//Wizard Health Score
if(hs &lt; healthScore &amp;&amp; ws &gt;= wallScore &amp;&amp; as &gt;= aScore)
{ 
    hs += 1;
}
draw_text(room_width/2, 340, "Wizard Health: " + string(hs));

//Total Score
ts = mk + as + ws + hs + ps;
draw_text(room_width/2, 410, "Total Score: " + string(ts));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
