<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>fire_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(element1 == "fire")
{
    sprite_index = fire_spr;
    mStartReload = 10;
    mDamage = 1;
    mSpeed = -15;
}
else if(element1 == "water")
{
    sprite_index = water_spr;
    mStartReload = 10;
    mDamage = 1;
    mSpeed = -15;
}
else if(element1 == "earth")
{
    sprite_index = earth_spr;
    mStartReload = 15;
    mDamage = 2;
    mSpeed = -10;
}
else 
{
    sprite_index = air_spr;
    mStartReload = 5;
    mDamage = 0.5
    mSpeed = -15;
}

//Temp variables to get the x and y direction of the mouse relative to the player (missile's starting position)
var xTemp;
var yTemp;

xTemp = mouse_x - x;
yTemp = mouse_y - y;
//Magnitude is the length of the vector from the player to the mouse
magnitude = sqrt(sqr(xTemp) + sqr(yTemp));

//Get the speed in the x direction as a unit vector
var xMUnitSpeed;
//Divide by zero case
if(magnitude != 0)
{
    //get the unit speed by dividing by the magnitude
    xMUnitSpeed = abs(xTemp / magnitude);
}
else
{
    xMUnitSpeed = 0;
}

//Same as for xMUnitSpeed
var yMUnitSpeed;

if (magnitude != 0)
{
    yMUnitSpeed = abs(yTemp / magnitude);
}
else
{
    xMUnitSpeed = 0;
}
//Get the speed in the y direction as a unit vector

if(xTemp &gt; 0)
{
    mhSpeed = -1 * xMUnitSpeed * mSpeed;
}
else
{
    mhSpeed = xMUnitSpeed * mSpeed;
}
mvSpeed = yMUnitSpeed * mSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//stop missile when paused
if(!paused)
{
    vspeed = mvSpeed;
    hspeed = mhSpeed;
}
else
{
    vspeed = 0;
    hspeed = 0;
}

//destroy missile out of bounds
if(y &lt; -10)
{
    instance_destroy();
}

if (gameOver)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemy_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//remove health from instance
other.eHealth -= mDamage;

mHit += 1;
//Destroy bullet and enemy instance, else just destroy bullet
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
