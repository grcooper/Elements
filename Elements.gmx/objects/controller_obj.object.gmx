<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spawn hero
instance_create(240,room_height-57,hero_obj);

//spawn wall
instance_create(0, room_height-75, wall_obj);

//Spawn intruders are coming sign
instance_create(room_width/2, room_height/2, intruders_obj);

//Set up pause variable
globalvar paused;
paused = false;

//Variable so you cannot move or shoot until intruders are coming is fading
globalvar startPaused;
startPaused = true;

//game over variable
globalvar gameOver;
gameOver = false;

//variable to make sure the step doesn't keep spawning game over
gameOverSpawn = false;

//accuracy variables
globalvar mFired;
mFired = 0;
globalvar mHit;
mHit = 0;

//minions to kill to win
globalvar winCond;
winCond = false;

//Enemies dead variable
globalvar eDead;
eDead = 0;

//Enemies dead goal
globalvar eGoal;
eGoal = 5 + (5 * curLevel);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!gameOver)
{
    if (paused == false)
    {
        if (keyboard_check_pressed(vk_escape))
        {
            paused = true;
            instance_create(room_width/2, 200, pause_obj);
            instance_create(room_width/2, 300, resume_obj);
            instance_create(room_width/2, 364, bmenu_obj);
            instance_create(0,0, fade_obj);
        }
    }
    else if (keyboard_check_pressed(vk_escape))
    {
        paused = false;
    }
}
    
if ((wallHealth &lt; 1) || (health &lt; 1))
{
    if (!gameOver)
    { 
        gameOver = true;
        instance_create(room_width/2,room_height/2,gameOver_obj);
        instance_create(0,0,fade_obj);
    }
}

//Win Condition Check
if (winCond)
{  
    gameOver = true;
    instance_create(room_width/2,room_height/2,gameOver_obj);
    instance_create(0,0,fade_obj);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gameOver == false)
{
    //Left side health bar
    draw_healthbar(0,0,32,room_height,health,c_black,c_green,c_red,3,true,true);
    
    //Right Side health bar
    draw_healthbar(room_width-32,0,room_width,room_height, wallHealth,c_black,c_green,c_red,3,true,true);
    
    //Shadow of score, may need to change
    draw_set_color(c_black);
    draw_set_font(scoreshadow_fnt);
    draw_set_halign(fa_center);
    draw_text(room_width/2,room_height - 32,string(score));
    
    //Score text
    draw_set_color(c_white);
    draw_set_font(score_fnt);
    draw_text(room_width/2,room_height - 32,string(score));
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
